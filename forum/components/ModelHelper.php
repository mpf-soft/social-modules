<?php
/**
 * Created by PhpStorm.
 * User: mirel
 * Date: 13.03.2015
 * Time: 14:51
 */
namespace mpf\modules\forum\components;

use mpf\base\Object;
use mpf\components\notifications\models\Type;
use mpf\components\notifications\Notifications;
use mpf\WebApp;

/**
 * Class ModelHelper
 * Allows developer to extend the current models used  by forum module.
 * There is no option here for controllers as they can easily be extended using controllerAliases option from WebApp class config.
 * Example for controller in config:
 *  $config['WebApp']['controllerAliases'] = [
 *      'forum/user' => '\app\forum-extenders\controllers\User'
 *  ];
 * @package mpf\modules\forum\components
 */
class ModelHelper extends Object {
    public $models = [
        'ForumCategory' => '\mpf\modules\forum\models\ForumCategory',
        'ForumReply' => '\mpf\modules\forum\models\ForumReply',
        'ForumSection' => '\mpf\modules\forum\models\ForumSection',
        'ForumSubcategory' => '\mpf\modules\forum\models\ForumSubcategory',
        'ForumThread' => '\mpf\modules\forum\models\ForumThread',
        'ForumTitle' => '\mpf\modules\forum\models\ForumTitle',
        'ForumUser2Section' => '\mpf\modules\forum\models\ForumUser2Section',
        'ForumUserGroup' => '\mpf\modules\forum\models\ForumUserGroup',
        'User' => '\app\models\User',
        'GlobalConfig' => '\app\models\GlobalConfig'
    ];

    protected static $_self;

    public static function get() {
        if (!self::$_self)
            self::$_self = new static();
        return self::$_self;
    }

    /**
     * @param string $method
     * @param array $params
     * @return mixed
     */
    public static function __callStatic($method, $params = []) {
        $model = self::get()->models[$params[0]];
        unset($params[0]);
        return call_user_func_array($model . '::' . $method, array_values($params));
    }

    /**
     * @param $model
     * @return \mpf\datasources\sql\DbModel
     */
    public static function model($model) {
        $model = self::get()->models[$model];
        return $model::model();
    }

    /**
     * @param string $model
     * @param string|int $pk
     * @return \mpf\datasources\sql\DbModel
     */
    public static function findByPk($model, $pk) {
        $model = self::get()->models[$model];
        return $model::findByPk($pk);
    }

    /**
     * @param string $model
     * @param string[] $attributes
     * @return \mpf\datasources\sql\DbModel
     */
    public static function findByAttributes($model, $attributes) {
        $model = self::get()->models[$model];
        return $model::findByAttributes($attributes);
    }

    /**
     * @param $model
     * @return \mpf\datasources\sql\DbModel
     */
    public static function getNew($model) {
        $model = self::get()->models[$model];
        return new $model();
    }

    public static function createSubscription($name, $type) {
        $originalType = $type;
        $type = Config::value('FORUM_NOTIFICATIONS_TYPES_PREFIX') . $type;
        if (!Type::findByAttributes(['name' => $type])) {
            $type = new Type();
            $type->name = $type;
            $type->description = "Automatically generated by the forum module! Can be edited to change the messages sent.";
            $type->email = self::getDefaultEmailForType($originalType);
            $type->sms = $type->web = $type->mobile = self::getDefaultMessageForType($originalType);
            $type->save();
        }
        Notifications::createSubscription(Config::value('FORUM_NOTIFICATIONS_SUBSCRIPTIONS_PREFIX') . $name, $type);
    }

    protected static function getDefaultEmailForType($type) {
        return "not set";
    }

    protected static function getDefaultMessageForType($type) {
        return "not set";
    }

    public static function subscribe($to, $userId = null) {
        return Notifications::subscribe(Config::value('FORUM_NOTIFICATIONS_SUBSCRIPTIONS_PREFIX') . $to, $userId ?: WebApp::get()->user()->id);
    }

    public static function unsubscribe($from, $userId = null) {
        return Notifications::unsubscribe(Config::value('FORUM_NOTIFICATIONS_SUBSCRIPTIONS_PREFIX') . $from, $userId ?: WebApp::get()->user()->id);
    }

    public static function notifySubscribers($subscription, $url, $vars){
        return Notifications::addForSubscription(Config::value('FORUM_NOTIFICATIONS_SUBSCRIPTIONS_PREFIX') . $subscription, $url, $vars);
    }

    public static function notifyUser($type, $url, $vars, $user = null) {
        $originalType = $type;
        $type = Config::value('FORUM_NOTIFICATIONS_TYPES_PREFIX') . $type;
        if (!Type::findByName($type)) {
            $typeModel = new Type();
            $typeModel->name = $type;
            $typeModel->description = "Automatically generated by the forum module! Can be edited to change the messages sent.";
            $typeModel->email = self::getDefaultEmailForType($originalType);
            $typeModel->sms = $typeModel->web = $typeModel->mobile = self::getDefaultMessageForType($originalType);
            $typeModel->save();
        }
        return Notifications::add($type, $url, $vars, $user ?: WebApp::get()->user()->id);
    }

}